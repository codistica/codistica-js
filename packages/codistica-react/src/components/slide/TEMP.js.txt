"use strict";

$.Slide = function Slide(data) {

    let i;
    let length;

    // ARGUMENTS CHECK AND DEFAULT SET
    if (typeof data.dotsContainer === "undefined") {
        data.dotsContainer = null;
    }

    if (typeof data.slideFlow === "undefined") {
        data.slideFlow = 'row';
    }

    if (typeof data.itemsPerView === "undefined") {
        data.itemsPerView = 'auto';
    }

    if (typeof data.startingPosition === "undefined") {
        data.startingPosition = 0;
    }

    if (typeof data.gap === "undefined") {
        data.gap = null;
    }

    if (typeof data.justifyType === "undefined") {
        data.justifyType = 'weighted';
    }

    if (typeof data.limitBehaviour === "undefined") {
        data.limitBehaviour = 'stop';
    }

    if (typeof data.responsive === "undefined") {
        data.responsive = false;
    }

    if (typeof data.matchSize === "undefined") {
        data.matchSize = false;
    }

    if (typeof data.anomalousSize !== "undefined") {
        data.anomalousSize = {
            value: typeof data.anomalousSize.value === "undefined" ? false : data.anomalousSize.value,
            ratio: typeof data.anomalousSize.ratio === "undefined" ? null : data.anomalousSize.ratio,
            minSize: typeof data.anomalousSize.minSize === "undefined" ? null : data.anomalousSize.minSize,
            maxSize: typeof data.anomalousSize.maxSize === "undefined" ? null : data.anomalousSize.maxSize
        };
    } else {
        data.anomalousSize = {
            value: false,
            ratio: null,
            minSize: null,
            maxSize: null
        };
    }

    if (typeof data.transitions !== "undefined") {
        if (typeof data.transitions.opacity === "undefined") {
            data.transitions = {
                opacity: {
                    effect: null,
                    duration: '0'
                },
                marginA: typeof data.transitions.marginA === "undefined" ? {
                    effect: null,
                    duration: '0'
                } : data.transitions.marginA,
                marginB: typeof data.transitions.marginB === "undefined" ? {
                    effect: null,
                    duration: '0'
                } : data.transitions.marginB,
                size: typeof data.transitions.size === "undefined" ? {
                    effect: null,
                    duration: '0'
                } : data.transitions.size,
                translate: typeof data.transitions.translate === "undefined" ? {
                    effect: null,
                    duration: '0'
                } : data.transitions.translate,
                matchSize: typeof data.transitions.matchSize === "undefined" ? {
                    effect: null,
                    duration: '0'
                } : data.transitions.matchSize
            };
        } else {
            data.transitions = {
                opacity: {
                    effect: data.transitions.opacity.effect,
                    duration: data.transitions.opacity.duration
                },
                marginA: {
                    effect: null,
                    duration: '0'
                },
                marginB: {
                    effect: null,
                    duration: '0'
                },
                size: {
                    effect: null,
                    duration: '0'
                },
                translate: {
                    effect: null,
                    duration: '0'
                },
                matchSize: typeof data.transitions.matchSize === "undefined" ? {
                    effect: null,
                    duration: '0'
                } : data.transitions.matchSize
            };
        }
    } else {
        data.transitions = {
            opacity: {
                effect: null,
                duration: '0'
            },
            marginA: {
                effect: null,
                duration: '0'
            },
            marginB: {
                effect: null,
                duration: '0'
            },
            size: {
                effect: null,
                duration: '0'
            },
            translate: {
                effect: 'ease',
                duration: '1s'
            },
            matchSize: {
                effect: null,
                duration: '0'
            },
        };
    }

    if (typeof data.smartScroll === "undefined") {
        data.smartScroll = {
            value: false,
            fallbackUp: null,
            fallbackDown: null,
            switchingA: [],
            switchingB: []
        };
    }

    if (typeof data.callback !== "function") {
        data.callback = null;
    }

    // BOUND METHODS OBJECT
    this.bound = {};

    // SAVE NEW INSTANCE ARGUMENTS
    this.itemsPerView = data.itemsPerView;
    this.startingPosition = data.startingPosition;
    this.gap = data.gap;
    this.justifyType = data.justifyType;
    this.limitBehaviour = data.limitBehaviour;
    this.responsive = data.responsive;
    this.matchSize = data.matchSize;
    this.anomalousSize = data.anomalousSize;
    this.transitions = data.transitions;
    this.callback = data.callback;

    // INTERNAL VARIABLES
    this.slideMaster = data.slideElement;
    this.slideTrack = this.slideMaster.firstElementChild;
    this.slideItems = this.slideTrack.getElementsByClassName('slide-item');
    this.dots = data.dotsContainer !== null ? data.dotsContainer.getElementsByClassName('slide-dot') : null;
    this.slideItemsContent = [];
    this.slideBusy = false;
    this.currentPosition = null;
    this.targetPosition = null;
    this.setupRun = true;
    this.initializeRun = true;

    // GET SLIDE ITEMS CONTENT
    length = this.slideItems.length;
    for (i = 0; i < length; i++) {
        this.slideItemsContent[i] = this.slideItems[i].firstElementChild;
    }

    // SLIDE FLOW
    this.slideFlow = {
        value: data.slideFlow,
        marginA: [],
        marginB: []
    };
    if (this.slideFlow.value === 'row') {
        this.slideFlow.marginA[0] = 'margin-left';
        this.slideFlow.marginB[0] = 'margin-right';
        this.slideFlow.marginA[1] = 'marginLeft';
        this.slideFlow.marginB[1] = 'marginRight';
        this.slideFlow.size = 'width';
        this.slideFlow.translate = 'translateX';
    } else {
        this.slideFlow.marginA[0] = 'margin-top';
        this.slideFlow.marginB[0] = 'margin-bottom';
        this.slideFlow.marginA[1] = 'marginTop';
        this.slideFlow.marginB[1] = 'marginBottom';
        this.slideFlow.size = 'height';
        this.slideFlow.translate = 'translateY';
    }

    // SMART SCROLL EVENTS
    this.smartScrollEvents = {
        unknownInput: null,
        keyScroll: false,
        timerA: null,
        timerB: null
    };

    // SMART SCROLL
    this.smartScroll = {
        value: typeof data.smartScroll.value === "undefined" ? false : data.smartScroll.value,
        fallbackUp: typeof data.smartScroll.fallbackUp === "undefined" ? null : data.smartScroll.fallbackUp,
        fallbackDown: typeof data.smartScroll.fallbackDown === "undefined" ? null : data.smartScroll.fallbackDown,
        switchingA: typeof data.smartScroll.switchingA === "undefined" ? null : data.smartScroll.switchingA, // TODO: DEFAULT TO [] ?
        switchingB: typeof data.smartScroll.switchingB === "undefined" ? null : data.smartScroll.switchingB, // TODO: DEFAULT TO [] ?
        a: 0,
        b: 0,
        damperWheel: 0.03,
        damperTouch: 0.08,
        damperScroll: 0.05,
        stop: false,
        timerA: null,
        touchPoint: null
    };

};
$.Slide.prototype.initialize = function initialize() {

    let i;
    let length;

    // INDICATE INITIALIZATION IN PROGRESS
    this.initializeRun = true;

    // CREATE BOUND METHODS
    this.bound.tabBlocker = this.tabBlocker.bind(this); // TODO: TEST WITHOUT BINDING. SHOULD NOT BE NEEDED!

    // ADD STRUCTURE CLASSES
    if (this.slideFlow.value === 'row') {
        // SLIDE MASTER
        this.slideMaster.classList.add('custom-flex-row');
        // SLIDE TRACK
        this.slideTrack.classList.add('custom-flex-row');
    } else {
        // SLIDE MASTER
        this.slideMaster.classList.add('custom-flex-column');
        // SLIDE TRACK
        this.slideTrack.classList.add('custom-flex-column');
    }
    // SLIDE MASTER
    this.slideMaster.classList.add('flex-justify-start');
    // SLIDE TRACK
    this.slideTrack.classList.add('flex-justify-start');

    if (this.justifyType === 'dynamic') {
        length = this.slideItems.length;
        for (i = 0; i < length; i++) {
            this.slideItems[i].classList.add('custom-flex-column');
        }
    }

    // ADD DOTS EVENT LISTENERS AND CLASSES
    if (this.dots !== null) {
        length = this.dots.length;
        for (i = 0; i < length; i++) {
            this.dots[i].addEventListener('click', this.switchTo.bind(this, i));
            this.dots[i].classList.add('make-button');
        }
    }

    // SMART SCROLL EVENTS HANDLER EVENT LISTENERS
    if (this.smartScroll.value === true) {
        this.slideMaster.addEventListener('touchstart', this.smartScrollEventsHandler.bind(this), $.support.passiveEvt === true && $.support.captureEvt === true ? {passive: false, capture: true} : true);
        this.slideMaster.addEventListener('touchmove', this.smartScrollEventsHandler.bind(this), $.support.passiveEvt === true && $.support.captureEvt === true ? {passive: false, capture: true} : true);
        this.slideMaster.addEventListener('touchend', this.smartScrollEventsHandler.bind(this), $.support.passiveEvt === true && $.support.captureEvt === true ? {passive: false, capture: true} : true);
        this.slideMaster.addEventListener('keydown', this.smartScrollEventsHandler.bind(this),$.support.passiveEvt === true && $.support.captureEvt === true ? {passive: false, capture: true} : true);
        this.slideMaster.addEventListener('scroll', this.smartScrollEventsHandler.bind(this),$.support.passiveEvt === true && $.support.captureEvt === true ? {passive: false, capture: true} : true);
        this.slideMaster.addEventListener('wheel', this.smartScrollEventsHandler.bind(this),$.support.passiveEvt === true && $.support.captureEvt === true ? {passive: false, capture: true} : true);
    }

    // SETUP SLIDE
    this.setup();

};
$.Slide.prototype.setup = function setup() {

    let slideSize;
    let viewportSize = null;
    let referenceSize = null;
    let referenceUnits = '';
    let i;
    let x, y;
    let length;
    let size = null;
    let margin = null;

    // INDICATE SETUP IN PROGRESS
    this.setupRun = true;

    // HIDE SLIDE MASTER
    this.slideMaster.style.visibility = 'hidden';

    // GET SLIDE MASTER AND VIEWPORT SIZE
    slideSize = this.slideMaster.getBoundingClientRect()[this.slideFlow.size];
    if (this.slideFlow.size === 'width') {
        viewportSize = $.page.engine.getViewportWidth();
    } else {
        viewportSize = $.page.engine.getViewportHeight();
    }

    // PREVENT ERROR IF ELEMENT IS NOT DISPLAYED (PREVENTS FAST RESIZING BUG WITHOUT THROTTLING AND/OR DEBOUNCING)
    if (slideSize === 0) {
        return;
    }

    // DETERMINE RESPONSIVENESS
    if (this.anomalousSize.value === true || this.responsive === false) {
        referenceSize = slideSize;
        referenceUnits = '%';
    } else {
        referenceSize = viewportSize;
        if (this.slideFlow.value === 'row') {
            referenceUnits = ' * var(--vw)';
        } else {
            referenceUnits = ' * var(--vh)';
        }
    }

    if (this.anomalousSize.value === true) {
        if (this.slideFlow.value === 'column') {
            // CORRECT BEHAVIOUR OF VERTICAL RELATIVE VALUES FOLLOWING HORIZONTAL SIZES
            if (typeof this.anomalousSize.ratio === "number") {
                this.slideTrack['style'].width = `calc(var(--vh) * ${this.anomalousSize.ratio * 100})`;
            }
            if (typeof this.anomalousSize.minSize === "number") {
                this.slideTrack['style'].minWidth = `${this.anomalousSize.minSize}px`;
            }
            if (typeof this.anomalousSize.maxSize === "number") {
                this.slideTrack['style'].maxWidth = `${this.anomalousSize.maxSize}px`;
            }
        }
        // MAKE TRACK EQUAL TO SLIDE
        this.slideTrack['style'][this.slideFlow.size] = `calc(${slideSize * 100 / referenceSize}${referenceUnits})`;
    }

    // SET slideMaster RELATIVE SIZE
    this.slideMaster.style[this.slideFlow.size] = `calc(${slideSize * 100 / referenceSize}${referenceUnits})`;

    if (this.initializeRun === true) {
        this.targetPosition = this.startingPosition;
    } else {
        this.targetPosition = this.currentPosition;
    }

    if (this.limitBehaviour !== 'continue') {
        // DETERMINE IF TARGET POSITION EXCEEDS SLIDE CAPACITY WITH NEW CONDITIONS
        x = this.targetPosition;
        if ((this.slideItems.length - x) < this.itemsPerView) {
            x = this.slideItems.length - this.itemsPerView;
        }
        this.targetPosition = x;
    }

    // SET CURRENT POSITION TO 0 TO RE-CALCULATE TRANSLATION FROM ORIGIN
    this.currentPosition = 0;

    // DEACTIVATE OLD DOT
    if (this.dots !== null && this.initializeRun !== true) {
        this.dots[this.currentPosition].classList.remove('slide-dot-active');
    }

    // ACTIVATE NEW DOT
    if (this.dots !== null) {
        this.dots[this.targetPosition].classList.add('slide-dot-active');
    }

    if (this.justifyType !== 'dynamic') {

        // (GAP)
        if (this.gap !== null) {
            length = this.slideItems.length;
            for (i = 0; i < length; i++) {
                this.slideItems[i].style[this.slideFlow.marginA[1]] = `${this.gap}px`;
                this.slideItems[i].style[this.slideFlow.marginB[1]] = `${this.gap}px`;
            }
        }

    } else {

        // SET DEFAULT SIZES AND MARGINS TO ALL ITEMS
        length = this.slideItemsContent.length;
        for (i = 0; i < length; i++) {

            size = this.slideItemsContent[i].getBoundingClientRect()[this.slideFlow.size];
            y = ((slideSize / this.itemsPerView) - size) / 2;

            margin = ((y / 2) / referenceSize) * 100;
            size = ((y + size) / referenceSize) * 100;

            this.slideItems[i].style[this.slideFlow.size] = `calc(${size}${referenceUnits})`;
            this.slideItems[i].style[this.slideFlow.marginA[1]] = `calc(${margin}${referenceUnits})`;
            this.slideItems[i].style[this.slideFlow.marginB[1]] = `calc(${margin}${referenceUnits})`;

        }

    }

    this.translate();

};
$.Slide.prototype.switchTo = function switchTo(position) {
    this.switchBy(position - this.currentPosition);
};
$.Slide.prototype.switchBy = function switchBy(quantity) {

    let switchQuantity = null;
    let i;
    let length;

    // PRE DECLARATION CODE
    if (this.slideBusy === true) {
        return;
    }

    // INDICATE SLIDE BUSY
    this.slideBusy = true;

    // SET TRANSITION DATA
    if (this.transitions.opacity.effect !== null) {
        this.slideTrack['style'].transition = `opacity ${this.transitions.opacity.duration} ${this.transitions.opacity.effect}`;
    } else {
        this.slideTrack['style'].transition = `transform ${this.transitions.translate.duration} ${this.transitions.translate.effect}`;
        length = this.slideItems.length;
        for (i = 0; i < length; i++) {
            this.slideItems[i].style.transition = `${this.slideFlow.marginA[0]} ${this.transitions.marginA.duration} ${this.transitions.marginA.effect}, ${this.slideFlow.marginB[0]} ${this.transitions.marginB.duration} ${this.transitions.marginB.effect}, ${this.slideFlow.size} ${this.transitions.size.duration} ${this.transitions.size.effect}`;
        }
    }
    this.slideMaster.style.transition = `${this.slideFlow.size} ${this.transitions.matchSize.duration} ${this.transitions.matchSize.effect}`;

    // *** SWITCHING SECTION ***

    if (quantity === '+group') {
        switchQuantity = this.itemsPerView;
    } else if (quantity === '-group') {
        switchQuantity = -this.itemsPerView;
    } else if (typeof quantity === "number") {
        switchQuantity = quantity;
    } else {
        return;
    }

    if (Math.sign(switchQuantity) === -1) {

        this.targetPosition = this.currentPosition + switchQuantity;

        while (this.targetPosition < 0 && this.limitBehaviour === 'stop') {

            if (this.currentPosition === 0) {

                // RESET TRANSITION DATA
                this.slideTrack['style'].removeProperty('transition');
                length = this.slideItems.length;
                for (i = 0; i < length; i++) {
                    this.slideItems[i].style.removeProperty('transition');
                }
                this.slideMaster.style.removeProperty('transition');

                // INDICATE SLIDE READY
                this.slideBusy = false;

                return;

            } else {
                this.targetPosition++;
            }

        }

    } else {

        this.targetPosition = this.currentPosition + switchQuantity;

        while ((this.targetPosition + this.itemsPerView) > this.slideItems.length && this.limitBehaviour === 'stop') {

            if (this.currentPosition === this.slideItems.length - this.itemsPerView) {

                // RESET TRANSITION DATA
                this.slideTrack['style'].removeProperty('transition');
                length = this.slideItems.length;
                for (i = 0; i < length; i++) {
                    this.slideItems[i].style.removeProperty('transition');
                }
                this.slideMaster.style.removeProperty('transition');

                // INDICATE SLIDE READY
                this.slideBusy = false;

                return;

            } else {
                this.targetPosition--;
            }

        }

    }

    // IMPORTANT. ALLOW DOM REFLOW
    setTimeout(function () {
        this.translate();
    }.bind(this), 50);

};
$.Slide.prototype.translate = function translate() {

    let distance;
    let translateValue = null;
    let slideSize;
    let viewportSize = null;
    let referenceSize = null;
    let referenceUnits = '';
    let i;
    let length;
    let size;
    let margin;
    let that = this;

    // GET SLIDE MASTER AND VIEWPORT SIZE
    slideSize = this.slideMaster.getBoundingClientRect()[this.slideFlow.size];
    if (this.slideFlow.size === 'width') {
        viewportSize = $.page.engine.getViewportWidth();
    } else {
        viewportSize = $.page.engine.getViewportHeight();
    }

    // DETERMINE RESPONSIVENESS
    if (this.anomalousSize.value === true || this.responsive === false) {
        referenceSize = slideSize;
        referenceUnits = '%';
    } else {
        referenceSize = viewportSize;
        if (this.slideFlow.value === 'row') {
            referenceUnits = ' * var(--vw)';
        } else {
            referenceUnits = ' * var(--vh)';
        }
    }

    // *** BEFORE TRANSITION ***

    // IMPORTANT. ADD TAB BLOCKER
    window.addEventListener('keydown', this.bound.tabBlocker, $.support.passiveEvt === true && $.support.captureEvt === true ? {passive: false, capture: true} : true);

    // IMPORTANT. MAKE ALL SLIDES ITEMS VISIBLE (FINAL VISIBILITY WILL BE SET AFTER TRANSITION ENDS)
    length = this.slideItems.length;
    for (i = 0; i < length; i++) {
        this.slideItems[i].style.visibility = 'visible';
    }

    // *** TRANSLATE SECTION ***

    if (this.transitions.opacity.effect !== null && this.setupRun !== true) {
        // FADE OUT SLIDE TRACK
        this.slideTrack['style'].opacity = '0';
        // IMPORTANT. TO CORRECTLY DISPLAY ANIMATION
        setTimeout(function () {
            // TRANSLATE
            calculateTranslation();
        }.bind(this), parseFloat(this.transitions.opacity.duration) * 1000);
    } else {
        // TRANSLATE
        calculateTranslation();
    }

    function calculateTranslation() {

        // MATCH SIZE
        if (that.matchSize === true) {

            // FREEZE SLIDE MASTER SIZE
            that.slideMaster.style[that.slideFlow.size] = `${slideSize}px`;

            // RESET
            that.slideItems[that.currentPosition].style.removeProperty(that.slideFlow.size);
            that.slideItems[that.currentPosition].style.removeProperty(`min-${that.slideFlow.size}`);

            // UN-DISPLAY NON TARGET SLIDE ITEMS
            length = that.slideItems.length;
            for (i = 0; i < length; i++) {
                if (i !== that.targetPosition) {
                    that.slideItems[i].style.display = 'none';
                } else {
                    that.slideItems[i].style.removeProperty('display');
                }
            }

            translateValue = 0;

        } else {

            // CALCULATE DISTANCE
            distance = that.targetPosition - that.currentPosition;
            translateValue = 0;
            if (Math.sign(distance) === -1) {

                for (i = 0; i < that.targetPosition; i++) {
                    size = that.slideItems[i].getBoundingClientRect()[that.slideFlow.size];
                    if (that.justifyType === 'dynamic') {
                        // HERE MARGIN CHOICE IS INDIFFERENT
                        margin = parseFloat(window.getComputedStyle(that.slideItems[i]).getPropertyValue(`${that.slideFlow.marginA[0]}`));
                        translateValue += size + (margin * 2);
                    } else {
                        // CONSIDER BOTH MARGINS
                        margin = parseFloat(window.getComputedStyle(that.slideItems[i]).getPropertyValue(`${that.slideFlow.marginA[0]}`)) + parseFloat(window.getComputedStyle(that.slideItems[i]).getPropertyValue(`${that.slideFlow.marginB[0]}`));
                        translateValue += size + margin;
                    }
                }

                translateValue = translateValue * 100 / referenceSize;

            } else if (Math.sign(distance) === 1) {

                for (i = 0; i < that.targetPosition; i++) {
                    size = that.slideItems[i].getBoundingClientRect()[that.slideFlow.size];
                    if (that.justifyType === 'dynamic') {
                        if (i === that.currentPosition) {
                            // IMPORTANT. MUST BE MARGIN 'B' TO AVOID CONSIDERING EXTRA MARGIN
                            margin = parseFloat(window.getComputedStyle(that.slideItems[i]).getPropertyValue(`${that.slideFlow.marginB[0]}`));
                        } else {
                            // IMPORTANT. MUST BE MARGIN 'A' TO AVOID CONSIDERING EXTRA MARGIN
                            margin = parseFloat(window.getComputedStyle(that.slideItems[i]).getPropertyValue(`${that.slideFlow.marginA[0]}`));
                        }
                        translateValue += size + (margin * 2);
                    } else {
                        // CONSIDER BOTH MARGINS
                        margin = parseFloat(window.getComputedStyle(that.slideItems[i]).getPropertyValue(`${that.slideFlow.marginA[0]}`)) + parseFloat(window.getComputedStyle(that.slideItems[i]).getPropertyValue(`${that.slideFlow.marginB[0]}`));
                        translateValue += size + margin;
                    }
                }

                translateValue = translateValue * 100 / referenceSize;

            }

        }

        // DEACTIVATE OLD DOT
        if (that.dots !== null) {
            that.dots[that.currentPosition].classList.remove('slide-dot-active');
        }

        // ACTIVATE NEW DOT
        if (that.dots !== null) {
            that.dots[that.targetPosition].classList.add('slide-dot-active');
        }

        // APPLY TRANSLATION
        that.slideTrack['style'].transform = translateValue > 0 ? `${that.slideFlow.translate}(calc(${translateValue * -1}${referenceUnits}))` : `${that.slideFlow.translate}(0)`;
        that.adjust();

    }

};
$.Slide.prototype.adjust = function adjust() {

    let slideSize;
    let viewportSize = null;
    let referenceSize = null;
    let referenceUnits = '';
    let allSizes = [];
    let i, j;
    let flag;
    let x;
    let length;
    let size;
    let margin;
    let that = this;

    // GET SLIDE MASTER AND VIEWPORT SIZE
    slideSize = this.slideMaster.getBoundingClientRect()[this.slideFlow.size];
    if (this.slideFlow.size === 'width') {
        viewportSize = $.page.engine.getViewportWidth();
    } else {
        viewportSize = $.page.engine.getViewportHeight();
    }

    // DETERMINE RESPONSIVENESS
    if (this.anomalousSize.value === true || this.responsive === false) {
        referenceSize = slideSize;
        referenceUnits = '%';
    } else {
        referenceSize = viewportSize;
        if (this.slideFlow.value === 'row') {
            referenceUnits = ' * var(--vw)';
        } else {
            referenceUnits = ' * var(--vh)';
        }
    }

    // *** DURING TRANSITION ***

    // DYNAMIC ADJUSTING
    if (this.justifyType === 'dynamic') {

        if (this.initializeRun === false && this.setupRun !== true) {

            // REMOVE EXTRA MARGIN OF OLD FIRST AND LAST ITEM
            margin = ((parseFloat(window.getComputedStyle(this.slideItems[this.currentPosition]).getPropertyValue(`${this.slideFlow.marginA[0]}`)) / 3) / referenceSize) * 100;
            this.slideItems[this.currentPosition].style[this.slideFlow.marginA[1]] = `calc(${margin}${referenceUnits})`;

            margin = ((parseFloat(window.getComputedStyle(this.slideItems[this.currentPosition + this.itemsPerView - 1]).getPropertyValue(`${this.slideFlow.marginB[0]}`)) / 3) / referenceSize) * 100;
            this.slideItems[this.currentPosition + this.itemsPerView - 1].style[this.slideFlow.marginB[1]] = `calc(${margin}${referenceUnits})`;

        }

        // CALCULATE ITEMS CONTENT COMMON MARGIN
        x = slideSize;
        for (j = 0; j < this.itemsPerView; j++) {

            if (typeof this.slideItemsContent[this.targetPosition + j] !== "undefined") {
                size = this.slideItemsContent[this.targetPosition + j].getBoundingClientRect()[this.slideFlow.size];
                allSizes[j] = size;
                x -= size;
            }

        }

        // CONSIDERING TWO EXTRA MARGINS FOR FIRST AND LAST ITEM
        x /= ((this.itemsPerView * 2) + 2);
        margin = ((x / 2) / referenceSize) * 100;

        // APPLY RESPECTIVE SIZES AND MARGINS
        flag = 0;
        for (j = 0; j < this.itemsPerView && flag !== 1; j++) {

            if (typeof this.slideItems[this.targetPosition + j] !== "undefined") {

                size = x + allSizes[j];
                size = ((x + allSizes[j]) / referenceSize) * 100;

                this.slideItems[this.targetPosition + j].style[this.slideFlow.size] = `calc(${size}${referenceUnits})`;

                if (this.itemsPerView === 1) {
                    this.slideItems[this.targetPosition + j].style[this.slideFlow.marginA[1]] = `calc(${3 * margin}${referenceUnits})`;
                    this.slideItems[this.targetPosition + j].style[this.slideFlow.marginB[1]] = `calc(${3 * margin}${referenceUnits})`;
                } else if (j === 0) {
                    // ADD EXTRA MARGIN
                    this.slideItems[this.targetPosition + j].style[this.slideFlow.marginA[1]] = `calc(${3 * margin}${referenceUnits})`;
                    this.slideItems[this.targetPosition + j].style[this.slideFlow.marginB[1]] = `calc(${margin}${referenceUnits})`;
                } else if (j === this.itemsPerView - 1) {
                    // ADD EXTRA MARGIN
                    this.slideItems[this.targetPosition + j].style[this.slideFlow.marginA[1]] = `calc(${margin}${referenceUnits})`;
                    this.slideItems[this.targetPosition + j].style[this.slideFlow.marginB[1]] = `calc(${3 * margin}${referenceUnits})`;
                } else {
                    this.slideItems[this.targetPosition + j].style[this.slideFlow.marginA[1]] = `calc(${margin}${referenceUnits})`;
                    this.slideItems[this.targetPosition + j].style[this.slideFlow.marginB[1]] = `calc(${margin}${referenceUnits})`;
                }

            } else {
                flag = 1;
            }

        }

    }

    // MATCH SIZE
    if (this.matchSize === true) {

        // SET NEW
        this.slideItems[this.targetPosition].style[`min-${this.slideFlow.size}`] = '0';
        this.slideItems[this.targetPosition].style[this.slideFlow.size] = 'auto';

        // UN-FREEZE SLIDE MASTER SIZE
        that.slideMaster.style[that.slideFlow.size] = `${that.slideItemsContent[this.targetPosition].getBoundingClientRect()[that.slideFlow.size]}px`;
        // IMPORTANT. TO CORRECTLY DISPLAY ANIMATION
        setTimeout(function () {
            if (this.transitions.opacity.effect !== null) {
                // FADE IN SLIDE TRACK
                this.slideTrack['style'].opacity = '1';
            }
            this.slideMaster.style[this.slideFlow.size] = 'auto';
        }.bind(this), parseFloat(this.transitions.matchSize.duration) * 1000);

    }

    // SAVE NEW CURRENT POSITION
    that.currentPosition = that.targetPosition;

    if (this.setupRun === true) {
        // SHOW SLIDE MASTER
        this.slideMaster.style.visibility = 'visible';
        endingProcess();
    } else {
        x = Math.max((parseFloat(this.transitions.opacity.duration) + parseFloat(this.transitions.matchSize.duration)), parseFloat(this.transitions.marginA.duration), parseFloat(this.transitions.marginB.duration), parseFloat(this.transitions.size.duration), parseFloat(this.transitions.translate.duration)) * 1000;
        // IMPORTANT. TO CORRECTLY DISPLAY ANIMATION
        setTimeout(endingProcess, x);
    }

    function endingProcess() {

        // *** AFTER TRANSITION ***

        if (that.initializeRun !== true) {
            // RESET TRANSITION DATA
            that.slideTrack['style'].removeProperty('transition');
            length = that.slideItems.length;
            for (i = 0; i < length; i++) {
                that.slideItems[i].style.removeProperty('transition');
            }
            that.slideMaster.style.removeProperty('transition');
        } else {
            // INDICATE INITIALIZATION ENDED
            that.initializeRun = false;
        }

        if (that.setupRun === true) {
            // SMART SCROLL FIRST RUN
            if (that.smartScroll.value === true) {
                that.smartScrollHandler();
            }
            // INDICATE SETUP ENDED
            that.setupRun = false;
        }

        // IMPORTANT. HIDE OUT OF VIEW SLIDE ITEMS (AVOID TAB NAVIGATION AND "FIND IN PAGE" OUTSIDE SHOWED CONTENT)
        length = that.slideItems.length;
        for (i = 0; i < length; i++) {
            if (i < that.currentPosition) {
                that.slideItems[i].style.visibility = 'hidden';
            } else if (i > that.currentPosition + that.itemsPerView - 1) {
                that.slideItems[i].style.visibility = 'hidden';
            }
        }

        // IMPORTANT. REMOVE TAB BLOCKER
        window.removeEventListener('keydown', that.bound.tabBlocker, $.support.passiveEvt === true && $.support.captureEvt === true ? {passive: false, capture: true} : true);

        // UNBLOCK SMART SCROLL HANDLER INTERACTIONS
        if (that.smartScroll.value === true) {
            that.smartScroll.stop = false;
        }

        // UPDATE SMART SCROLL
        if (that.smartScroll.value === true) {
            that.smartScrollHandler();
        }

        if (typeof that.callback === "function" && that.initializeRun !== true && that.setupRun !== true) {
            // FIRE CALLBACK
            that.callback();
        }

        // INDICATE SLIDE READY
        that.slideBusy = false;
    }

};
$.Slide.prototype.smartScrollEventsHandler = function smartScrollEventsHandler(e) {

    e = $.eventManager(e);

    // SAVE TOUCHMOVE STARTING POSITION
    if (e.type === 'touchstart') {
        this.smartScroll.touchPoint = this.slideFlow.value === 'column' ? e.touches[0].screenY : e.touches[0].screenX;
        return;
    }

    // DETECT KEY SCROLL
    if (e.type === 'keydown') {
        if (e.which >= 37 && e.which <= 40) {
            // ARROW PRESSED
            this.smartScrollEvents.keyScroll = true;
        }
    }

    // TIMER A (100ms EVENT CESSATION THRESHOLD)
    // STOP TIMER
    clearTimeout(this.smartScrollEvents.timerA);
    // RECREATE TIMER
    this.smartScrollEvents.timerA = setTimeout(function () {
        // RESET TIMER
        this.smartScrollEvents.timerA = null;
        // RESET UNKNOWN INPUT
        this.smartScrollEvents.unknownInput = null;
        this.smartScrollEvents.keyScroll = false;
    }.bind(this), 100);

    if (e.type === 'keydown') {
        return;
    }

    // IMPORTANT. CHOOSE WHICH EVENT TO USE
    if (e.type === 'scroll') {
        e.smartAPP.keyScroll = this.smartScrollEvents.keyScroll;
        if (this.smartScrollEvents.unknownInput === null) {
            // TIMER B (100ms EVENT VERIFICATION THRESHOLD)
            if (this.smartScrollEvents.timerB === null) {
                // CREATE TIMER
                this.smartScrollEvents.timerB = setTimeout(function () {
                    // INDICATE UNKNOWN INPUT
                    if (this.smartScrollEvents.unknownInput === null) {
                        this.smartScrollEvents.unknownInput = true;
                        // FIRE SMART SCROLL HANDLER
                        this.smartScrollHandler(e);
                    }
                    // RESET TIMER
                    this.smartScrollEvents.timerB = null;
                }.bind(this), 100);
            }
        } else if (this.smartScrollEvents.unknownInput === true) {
            // FIRE SMART SCROLL HANDLER
            this.smartScrollHandler(e);
        }
    } else {
        // INDICATE KNOWN INPUT
        this.smartScrollEvents.unknownInput = false;
        // FIRE SMART SCROLL HANDLER
        this.smartScrollHandler(e);
    }

};
$.Slide.prototype.smartScrollHandler = function smartScrollHandler(e) {

    let i;
    let length;
    let scrolledSize = null;
    let scrollableSize = null;
    let scrollViewSize = null;
    let deltaScroll = null;
    let opacity = null;
    let that = this;

    e = $.eventManager(e);

    // GET GEOMETRY
    if (this.slideFlow.value === 'column') {
        scrolledSize = this.slideItems[this.currentPosition].scrollTop;
        scrollableSize = this.slideItems[this.currentPosition].scrollHeight;
        scrollViewSize = this.slideItems[this.currentPosition].clientHeight;
    } else {
        scrolledSize = this.slideItems[this.currentPosition].scrollLeft;
        scrollableSize = this.slideItems[this.currentPosition].scrollWidth;
        scrollViewSize = this.slideItems[this.currentPosition].clientWidth;
    }

    // DISPLAY/UN-DISPLAY FALLBACK ELEMENTS (WITH 0.2 ANTICIPATION)
    // CASE: UP
    if (this.smartScroll.fallbackUp !== null) {
        if (scrolledSize <= (scrollableSize - scrollViewSize) * 0.2 && this.currentPosition !== 0) {
            this.smartScroll.fallbackUp.classList.remove('display-none');
        } else {
            this.smartScroll.fallbackUp.classList.add('display-none');
        }
    }
    // CASE: DOWN
    if (this.smartScroll.fallbackUp !== null) {
        if (scrollableSize - scrollViewSize - scrolledSize <= (scrollableSize - scrollViewSize) * 0.2 && this.currentPosition !== this.slideItems.length - 1) {
            this.smartScroll.fallbackDown.classList.remove('display-none');
        } else {
            this.smartScroll.fallbackDown.classList.add('display-none');
        }
    }

    // NON EVENT CALLS TERMINATE HERE
    if (e === null) {
        return;
    }

    // SCROLL BEHAVIOUR AT LIMIT POSITIONS
    if (scrolledSize <= 0 || (scrolledSize + scrollViewSize) >= scrollableSize) {

        // CASE: CONTENT IS AT TOP OR BOTTOM OF TARGETED SLIDE ITEM

        // DETECT EVENT TYPE AND GET DELTA SCROLL
        if (e.type === 'wheel' || e.type === 'mousewheel' || e.type === 'DOMMouseScroll') {

            // GET DELTA SCROLL
            // APPLY FIRST DAMPER (CONSTANT DAMPER)
            // INVERT TO BE COHERENT WITH DOM SIGNS
            deltaScroll = (this.slideFlow.value === 'column' ? e.deltaY : e.deltaX) * this.smartScroll.damperWheel * -1;

        } else if (e.type === 'touchmove') {

            // CALCULATE DELTA SCROLL
            // APPLY FIRST DAMPER (CONSTANT DAMPER)
            deltaScroll = ((this.slideFlow.value === 'column' ? e.touches[0].screenY : e.touches[0].screenX) - this.smartScroll.touchPoint) * this.smartScroll.damperTouch;
            // SAVE NEW POSITION
            this.smartScroll.touchPoint = this.slideFlow.value === 'column' ? e.touches[0].screenY : e.touches[0].screenX;

        } else if (e.type === 'scroll') {
            if (e.smartAPP.keyScroll !== true) {
                return;
            }
            deltaScroll = 0;
        }

        // FILTER SPIKES/EXCESSIVE SCROLLING
        if (deltaScroll > 0.8) {
            deltaScroll = 0.8;
        } else if (deltaScroll < -0.8) {
            deltaScroll = -0.8;
        }

        if (this.smartScroll.stop !== true && this.slideBusy !== true) {

            // CHECK IF THERE IS USER INTERACTION WITH SWITCHING AREAS
            if ((scrolledSize <= 0 && (Math.sign(deltaScroll) === 1 || deltaScroll === 0)) || ((scrolledSize + scrollViewSize) >= scrollableSize && (Math.sign(deltaScroll) === -1 || deltaScroll === 0))) {

                // CLEAR TIMER
                if (this.smartScroll.timerA !== null) {
                    this.smartScroll.timerA.clear();
                    this.smartScroll.timerA = null;
                }

                // RECREATE TIMER
                this.smartScroll.timerA = $.createTimeout(function () {
                    if (this.smartScroll.stop !== true) {
                        // PULL BACK ALL
                        pullBack('all');
                        this.smartScroll.timerA = null;
                    }
                }.bind(this), 100);

            }

            // PULL BACK OPPOSITE AREA
            if (Math.sign(deltaScroll) === 1) {
                pullBack('b');
            } else if (Math.sign(deltaScroll) === -1) {
                pullBack('a');
            }

            if ((scrolledSize <= 0 && (Math.sign(deltaScroll) === 1 || deltaScroll === 0)) && this.currentPosition !== 0) {

                // CASE: AT TOP AND PULL DOWN. AREA A

                // ADD DYNAMIC DAMPER
                deltaScroll *= (1 - Math.abs(this.smartScroll.a) / 10);

                // CALCULATE OPACITY
                opacity = (Math.abs(this.smartScroll.a) / 10) + 3 / 10;

                if (this.smartScroll.a + deltaScroll < 0) {
                    this.smartScroll.a = 0;
                } else if (this.smartScroll.a + deltaScroll > 10) {
                    this.smartScroll.a = 10;
                } else {
                    this.smartScroll.a += deltaScroll;
                }

                requestAnimationFrame(function () {
                    length = this.smartScroll.switchingA.length;
                    for (i = 0; i < length; i++) {
                        this.smartScroll.switchingA[i].style.transform = `translateY(calc(var(--vh) * ${this.smartScroll.a}))`;
                        if (i === 0) {
                            this.smartScroll.switchingA[i].style.opacity = `${opacity}`;
                        }
                    }
                }.bind(this));

                if (this.smartScroll.a >= 7 || e.smartAPP.keyScroll === true) {
                    // THRESHOLD REACHED
                    // SWITCH SLIDE
                    this.switchBy(-1);
                    // PULL BACK AL
                    pullBack('all', true);
                }

            } else if (((scrolledSize + scrollViewSize) >= scrollableSize && (Math.sign(deltaScroll) === -1 || deltaScroll === 0)) && this.currentPosition !== this.slideItems.length - 1) {

                // CASE: AT BOTTOM AND PULL UP. AREA B

                // ADD DYNAMIC DAMPER
                deltaScroll *= (1 - (Math.abs(this.smartScroll.b) / 10));

                // CALCULATE OPACITY
                opacity = (Math.abs(this.smartScroll.b) / 10) + 3 / 10;

                if (this.smartScroll.b + deltaScroll < -10) {
                    this.smartScroll.b = -10;
                } else if (this.smartScroll.b + deltaScroll > 0) {
                    this.smartScroll.b = 0;
                } else {
                    this.smartScroll.b += deltaScroll;
                }

                requestAnimationFrame(function () {
                    length = this.smartScroll.switchingB.length;
                    for (i = 0; i < length; i++) {
                        this.smartScroll.switchingB[i].style.transform = `translateY(calc(var(--vh) * ${this.smartScroll.b}))`;
                        if (i === 0) {
                            this.smartScroll.switchingB[i].style.opacity = `${opacity}`;
                        }
                    }
                }.bind(this));

                if (this.smartScroll.b <= -7 || e.smartAPP.keyScroll === true) {
                    // THRESHOLD REACHED
                    // SWITCH SLIDE
                    this.switchBy(1);
                    // PULL BACK ALL
                    pullBack('all', true);
                }

            }

        }

    }

    function pullBack(area, switching) {

        if (typeof switching !== "boolean") {
            switching = false;
        }

        if ((area === 'all' && (that.smartScroll.a !== 0 || that.smartScroll.b !== 0)) || (area === 'a' && that.smartScroll.a !== 0) || (area === 'b' && that.smartScroll.b !== 0)) {

            // BLOCK SUCCESSIVE INTERACTIONS UNTIL PULL BACK ENDS
            that.smartScroll.stop = true;

            // SET TRANSITION DATA
            if (area === 'all' || area === 'a') {
                length = that.smartScroll.switchingA.length;
                for (i = 0; i < length; i++) {
                    that.smartScroll.switchingA[i].style.transition = 'transform 0.3s linear';
                    if (i === 0) {
                        that.smartScroll.switchingA[i].style.transition = 'transform 0.3s linear, opacity 0.3s linear';
                    }
                }
            }
            if (area === 'all' || area === 'b') {
                length = that.smartScroll.switchingB.length;
                for (i = 0; i < length; i++) {
                    that.smartScroll.switchingB[i].style.transition = 'transform 0.3s linear';
                    if (i === 0) {
                        that.smartScroll.switchingB[i].style.transition = 'transform 0.3s linear, opacity 0.3s linear';
                    }
                }
            }

            // IMPORTANT. ALLOW DOM REFLOW
            setTimeout(function () {

                if (area === 'all' || area === 'a') {
                    that.smartScroll.a = 0;
                    length = that.smartScroll.switchingA.length;
                    for (i = 0; i < length; i++) {
                        that.smartScroll.switchingA[i].style.transform = `translateY(calc(var(--vh) * ${that.smartScroll.a}))`;
                        if (i === 0) {
                            that.smartScroll.switchingA[i].style.opacity = '0';
                        }
                    }
                }

                if (area === 'all' || area === 'b') {
                    that.smartScroll.b = 0;
                    length = that.smartScroll.switchingB.length;
                    for (i = 0; i < length; i++) {
                        that.smartScroll.switchingB[i].style.transform = `translateY(calc(var(--vh) * ${that.smartScroll.b}))`;
                        if (i === 0) {
                            that.smartScroll.switchingB[i].style.opacity = '0';
                        }
                    }
                }

                // IMPORTANT. TO CORRECTLY DISPLAY ANIMATION
                setTimeout(function () {

                    // RESET TRANSITION DATA
                    if (area === 'all' || area === 'a') {
                        length = that.smartScroll.switchingA.length;
                        for (i = 0; i < length; i++) {
                            that.smartScroll.switchingA[i].style.removeProperty('transition');
                        }
                    }
                    if (area === 'all' || area === 'b') {
                        length = that.smartScroll.switchingB.length;
                        for (i = 0; i < length; i++) {
                            that.smartScroll.switchingB[i].style.removeProperty('transition');
                        }
                    }

                    if (switching !== true) {
                        // IMPORTANT. ALLOW DOM REFLOW
                        setTimeout(function () {
                            // UNBLOCK SUCCESSIVE INTERACTIONS
                            that.smartScroll.stop = false;
                        }, 50);
                    }

                }, 300);

            }, 50);

        }

    }

};
$.Slide.prototype.touchSwitchHandler = function touchSwitchHandler(e) {

};
$.Slide.prototype.tabBlocker = function tabBlocker(e) {
    e = $.eventManager(e);
    if (e.which === 9) {
        e.preventDefault();
    }
};
